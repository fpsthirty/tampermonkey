// ==UserScript==
// @name         Twitch Popper Hider v2.16
// @namespace    https://www.tampermonkey.net/
// @version      2.16
// @description  —Å–∫—Ä—ã—Ç–∏–µ –≤—Å–ø–ª—ã–≤–∞—à–∫–∏ –æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–º —Å—Ç—Ä–∏–º–µ –≤ —Å–∞–π–¥–±–∞—Ä–µ —Å–ø—É—Å—Ç—è 2.5‚Äì5—Å–µ–∫ –ø–æ—Å–ª–µ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ —Å —Å–∞–π–¥–±–∞—Ä–∞
// @author       fpsthirty + DeepSeek
// @match        https://www.twitch.tv/*
// @grant        none
// @run-at       document-start
// ==/UserScript==

/*
—Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞:
‚Ä¢ –ù–∞–≤–µ–ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞ side-nav-card ‚Üí ‚ñ∂Ô∏è –í–∫–ª—é—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ + üîì –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–Ω–µ–µ —Å–∫—Ä—ã—Ç—ã–µ –≤—Å–ø–ª—ã–≤–∞—à–∫–∏ —Å–∞–π–¥–±–∞—Ä–∞, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –∞–≤–∞—Ç–∞—Ä—É —Å—Ç—Ä–∏–º–∞ –≤ hover-—Å–æ—Å—Ç–æ—è–Ω–∏–∏
‚Ä¢ –£–±—Ä–∞–ª–∏ –∫—É—Ä—Å–æ—Ä —Å side-nav-card ‚Üí ‚è∞ –°–∫—Ä—ã—Ç—å –≤—Å–ø–ª—ã–≤–∞—à–∫–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫
‚Ä¢ –°–∫—Ä—ã–ª–∏ —ç–ª–µ–º–µ–Ω—Ç ‚Üí ‚è∏Ô∏è –ü–∞—É–∑–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
*/

(function() {
    'use strict';

    let isDebugged = false;
    if (isDebugged) {
        console.log('üöÄ Twitch Popper Hider Full Logging –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    }

    let hiddenCount = 0;
    const processedElements = new Set();
    const hiddenElements = new Map();
    let isActive = true;
    let checkInterval = 2000;
    let inactivityTimer = null;
    let hoverDelayTimer = null;
    let isHoveringSideNav = false;
    let isPausedAfterHide = false;

    // –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    let debugCheckCounter = 0;
    let debugMutationCounter = 0;
    let debugScheduleCounter = 0;
    let debugPopperFoundCounter = 0;


    // –î–ª—è —É–º–Ω–æ–π –ø–∞—É–∑—ã observer
    let consecutiveSkippedMutations = 0;
    let consecutiveNoPoppersFound = 0;
    const MAX_CONSECUTIVE_SKIPS = 10;
    const MAX_CONSECUTIVE_NO_POPPERS = 10;
    let observerPaused = false;

    function increaseCheckFrequency() {
        if (checkInterval > 2000) {
            checkInterval = 2000;
            if (isDebugged) {
                console.log('‚ö° –ü–æ–≤—ã—à–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ 2 —Å–µ–∫—É–Ω–¥');
            }
            restartInterval();
        }
    }

    function decreaseCheckFrequency() {
        if (checkInterval < 30000) {
            checkInterval = 30000;
            if (isDebugged) {
                console.log('üê¢ –ü–æ–Ω–∏–∂–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ 30 —Å–µ–∫—É–Ω–¥');
            }
            restartInterval();
        }
    }

    function restartInterval() {
        if (window._checkIntervalId) {
            clearInterval(window._checkIntervalId);
        }
        window._checkIntervalId = setInterval(findAndSchedulePoppers, checkInterval);
    }

    function pauseAfterHiding() {
        isPausedAfterHide = true;
        if (isDebugged) {
            console.log('‚è∏Ô∏è –ü–ê–£–ó–ê: –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–æ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ side-nav-card');
        }
        decreaseCheckFrequency();
    }

    function resumeAfterHover() {
        if (isPausedAfterHide) {
            isPausedAfterHide = false;
            if (isDebugged) {
                console.log('‚ñ∂Ô∏è –í–û–ó–û–ë–ù–û–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã (–Ω–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ side-nav-card)');
            }
            increaseCheckFrequency();
            consecutiveSkippedMutations = 0;
            consecutiveNoPoppersFound = 0;
            observerPaused = false;
            setTimeout(findAndSchedulePoppers, 100);
        }
    }

    function scheduleHiding(element) {
        if (processedElements.has(element) && isDebugged) {
                console.log('‚û°Ô∏è –≠–ª–µ–º–µ–Ω—Ç —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
        }

        processedElements.add(element);
        debugScheduleCounter++;
        if (isDebugged) {
            console.log('‚è∞ –¢–ê–ô–ú–ï–† –£–°–¢–ê–ù–û–í–õ–ï–ù [' + debugScheduleCounter + ']: –≠–ª–µ–º–µ–Ω—Ç –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥');
        }

        increaseCheckFrequency();
        resetInactivityTimer();

        const timeoutId = setTimeout(() => {
            if (element && element.isConnected) {
                hiddenElements.set(element, {
                    display: element.style.display,
                    visibility: element.style.visibility,
                    opacity: element.style.opacity
                });

                element.style.cssText += '; display: none !important; visibility: hidden !important; opacity: 0 !important;';
                hiddenCount++;
                if (isDebugged) {
                    console.log(`‚úÖ –°–ö–†–´–¢–ò–ï [${hiddenCount}]: –≠–ª–µ–º–µ–Ω—Ç —Å–∫—Ä—ã—Ç`);
                }
                pauseAfterHiding();
            }
            processedElements.delete(element);
        }, 2500);

        element._hideTimeoutId = timeoutId;
    }

    function showElement(element) {
        if (element && hiddenElements.has(element)) {
            const originalStyles = hiddenElements.get(element);
            element.style.display = originalStyles.display || '';
            element.style.visibility = originalStyles.visibility || '';
            element.style.opacity = originalStyles.opacity || '';
            hiddenElements.delete(element);
            if (isDebugged) {
                console.log('üîì –≠–ª–µ–º–µ–Ω—Ç –ø–æ–∫–∞–∑–∞–Ω');
            }
        }
    }

    function resetInactivityTimer() {
        if (inactivityTimer) clearTimeout(inactivityTimer);
        inactivityTimer = setTimeout(() => {
            if (isDebugged) {
                console.log('üí§ –ù–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: —É–º–µ–Ω—å—à–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ø—Ä–æ–≤–µ—Ä–æ–∫');
            }
            decreaseCheckFrequency();
        }, 30000);
    }

    function pauseCheckingDueToHover() {
        if (hoverDelayTimer) clearTimeout(hoverDelayTimer);

        isHoveringSideNav = true;
        if (isDebugged) {
            console.log('üñ±Ô∏è  –ö–£–†–°–û–† –í–•–û–î: –ù–∞ side-nav-card');
        }

        consecutiveSkippedMutations = 0;
        consecutiveNoPoppersFound = 0;
        observerPaused = false;

        resumeAfterHover();

        hiddenElements.forEach((styles, element) => {
            if (element.isConnected) showElement(element);
        });
    }

    function resumeCheckingAfterHover() {
        isHoveringSideNav = false;

        if (hoverDelayTimer) clearTimeout(hoverDelayTimer);
        if (isDebugged) {
            console.log('üñ±Ô∏è  –ö–£–†–°–û–† –í–´–•–û–î: –° side-nav-card');
        }

        hoverDelayTimer = setTimeout(() => {
            if (isDebugged) {
                console.log('üñ±Ô∏è  –í–û–ó–û–ë–ù–û–í–õ–ï–ù–ò–ï: 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —É—Ö–æ–¥–∞ –∫—É—Ä—Å–æ—Ä–∞');
            }

            const poppers = document.querySelectorAll('[data-popper-escaped]');
            let scheduledCount = 0;
            poppers.forEach(popper => {
                if (!processedElements.has(popper) && isElementVisible(popper)) {
                    scheduleHiding(popper);
                    scheduledCount++;
                }
            });
            if (scheduledCount > 0 && isDebugged) {
                console.log('üñ±Ô∏è  –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Å–∫—Ä—ã—Ç–∏–µ: ' + scheduledCount + ' —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
            }
        }, 2500);
    }

    function findAndSchedulePoppers() {
        debugCheckCounter++;

        const blockReasons = [];
        if (!isActive) blockReasons.push('—Å–∫—Ä–∏–ø—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
        if (isHoveringSideNav) blockReasons.push('–∫—É—Ä—Å–æ—Ä –Ω–∞ side-nav');
        if (isPausedAfterHide) blockReasons.push('–ø–∞—É–∑–∞ –ø–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–∏—è');
        if (observerPaused) blockReasons.push('observer –Ω–∞ –ø–∞—É–∑–µ');

        if (blockReasons.length > 0 ) {
            if (isDebugged) {
                console.log('üö´ –ü–†–û–í–ï–†–ö–ê [' + debugCheckCounter + ']: –ü—Ä–æ–ø—É—â–µ–Ω–∞ - ' + blockReasons.join(', '));
            }
            return;
        }
        if (isDebugged) {
            console.log('üîç –ü–†–û–í–ï–†–ö–ê [' + debugCheckCounter + ']: –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤...');
        }

        const elements = document.querySelectorAll('[data-popper-escaped]');
        if (isDebugged) {
            console.log('üîç –ü–†–û–í–ï–†–ö–ê [' + debugCheckCounter + ']: –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ' + elements.length);
        }

        let scheduledCount = 0;

        elements.forEach(element => {
            if (isElementVisible(element) && !processedElements.has(element)) {
                scheduleHiding(element);
                scheduledCount++;
            }
        });

        if (scheduledCount > 0) {
            if (isDebugged) {
                console.log('üîç –ü–†–û–í–ï–†–ö–ê [' + debugCheckCounter + ']: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Å–∫—Ä—ã—Ç–∏–µ: ' + scheduledCount + ' —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
            }
        } else {
            if (isDebugged) {
                console.log('üîç –ü–†–û–í–ï–†–ö–ê [' + debugCheckCounter + ']: –ù–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }
        }

        if (!scheduledCount) {
            resetInactivityTimer();
        }
    }

    function isElementVisible(element) {
        try {
            if (!element || !element.getBoundingClientRect) return false;
            const rect = element.getBoundingClientRect();
            const style = window.getComputedStyle(element);
            return style.visibility !== 'hidden' &&
                   style.display !== 'none' &&
                   rect.width > 0 &&
                   rect.height > 0;
        } catch (error) {
            return false;
        }
    }

    function setupSideNavHoverHandlers() {
        function setupSideNavCards() {
            const sideNavCards = document.querySelectorAll('.side-nav-card, [class*="side-nav-card"]');
            if (isDebugged) {
                console.log('üéØ –ù–∞–π–¥–µ–Ω–æ side-nav-card —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ' + sideNavCards.length);
            }
            sideNavCards.forEach(card => {
                if (!card._hoverHandled) {
                    card.addEventListener('mouseenter', pauseCheckingDueToHover);
                    card.addEventListener('mouseleave', resumeCheckingAfterHover);
                    card._hoverHandled = true;
                }
            });
        }
        setupSideNavCards();

        const sideNavObserver = new MutationObserver(function(mutations) {
            let cardsAdded = false;
            mutations.forEach(function(mutation) {
                if (mutation.type === 'childList') {
                    mutation.addedNodes.forEach(function(node) {
                        if (node.nodeType === 1) {
                            if (node.classList && (node.classList.contains('side-nav-card') ||
                                Array.from(node.classList).some(cls => cls.includes('side-nav-card')))) {
                                cardsAdded = true;
                            }
                            if (node.querySelectorAll) {
                                const childCards = node.querySelectorAll('.side-nav-card, [class*="side-nav-card"]');
                                if (childCards.length > 0) cardsAdded = true;
                            }
                        }
                    });
                }
            });
            if (cardsAdded) {
                if (isDebugged) {
                    console.log('üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ side-nav-card —ç–ª–µ–º–µ–Ω—Ç—ã');
                }
                setTimeout(setupSideNavCards, 100);
            }
        });
        sideNavObserver.observe(document.body, { childList: true, subtree: true });
    }

    // OBSERVER –° –ü–ê–£–ó–û–ô –ü–†–ò 10 –ü–†–û–ü–£–°–ö–ê–• –ò–õ–ò 10 –ù–ï–ù–ê–•–û–î–ö–ê–•
    const observer = new MutationObserver(function(mutations) {
        debugMutationCounter++;

        const blockReasons = [];
        if (!isActive) blockReasons.push('—Å–∫—Ä–∏–ø—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
        if (isHoveringSideNav) blockReasons.push('–∫—É—Ä—Å–æ—Ä –Ω–∞ side-nav');
        if (isPausedAfterHide) blockReasons.push('–ø–∞—É–∑–∞ –ø–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–∏—è');

        if (blockReasons.length > 0) {
            // üî• –ü–†–û–ü–£–°–ö –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            consecutiveSkippedMutations++;
            consecutiveNoPoppersFound = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–µ–Ω–∞—Ö–æ–¥–æ–∫

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤
            if (consecutiveSkippedMutations >= MAX_CONSECUTIVE_SKIPS && !observerPaused) {
                observerPaused = true;
                if (isDebugged) {
                    console.log('‚è∏Ô∏è OBSERVER –ü–ê–£–ó–ê: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤ (' + MAX_CONSECUTIVE_SKIPS + '), –∂–¥—ë–º –Ω–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ side-nav-card');
                }
                observer.disconnect();
            }

            if (isDebugged) {
                console.log('üö´ MUTATION [' + debugMutationCounter + ']: –ü—Ä–æ–ø—É—â–µ–Ω–æ - ' + blockReasons.join(', ') +
                       ' (–ø—Ä–æ–ø—É—Å–∫–æ–≤ –ø–æ–¥—Ä—è–¥: ' + consecutiveSkippedMutations + ', –Ω–µ–Ω–∞—Ö–æ–¥–æ–∫ –ø–æ–¥—Ä—è–¥: ' + consecutiveNoPoppersFound + ')');
            }
            return;
        }

        // üî• –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –∫–æ–≥–¥–∞ observer –∞–∫—Ç–∏–≤–µ–Ω
        consecutiveSkippedMutations = 0;

        // üî• –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ï—Å–ª–∏ observer –±—ã–ª –Ω–∞ –ø–∞—É–∑–µ - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
        if (observerPaused) {
            observerPaused = false;
            if (isDebugged) {
                console.log('üëÅÔ∏è Observer –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ—Å–ª–µ –ø–∞—É–∑—ã');
            }
            observer.observe(document, { childList: true, subtree: true });
        }

        let foundPoppers = false;
        let totalNewPoppers = 0;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —É–∑–ª—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ div[data-popper-escaped]
        for (const mutation of mutations) {
            if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                for (const node of mutation.addedNodes) {
                    if (node.nodeType === 1) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —É–∑–µ–ª
                        if (node.matches && node.matches('div[data-popper-escaped]')) {
                            debugPopperFoundCounter++;
                            if (isDebugged) {
                                console.log('üéØ MUTATION [' + debugMutationCounter + ']: –ù–∞–π–¥–µ–Ω div[data-popper-escaped] –≤ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º —É–∑–ª–µ');
                            }
                            if (isElementVisible(node) && !processedElements.has(node)) {
                                scheduleHiding(node);
                                foundPoppers = true;
                                totalNewPoppers++;
                            }
                        }

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ div[data-popper-escaped]
                        const childPoppers = node.querySelectorAll ? node.querySelectorAll('div[data-popper-escaped]') : [];
                        if (childPoppers.length > 0) {
                            debugPopperFoundCounter++;
                            if (isDebugged) {
                                console.log('üéØ MUTATION [' + debugMutationCounter + ']: –ù–∞–π–¥–µ–Ω–æ –¥–æ—á–µ—Ä–Ω–∏—Ö div[data-popper-escaped]: ' + childPoppers.length);
                            }
                            for (const element of childPoppers) {
                                if (isElementVisible(element) && !processedElements.has(element)) {
                                    scheduleHiding(element);
                                    foundPoppers = true;
                                    totalNewPoppers++;
                                }
                            }
                        }
                    }
                }
            }
        }

        if (foundPoppers) {
            // üî• –ù–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–µ–Ω–∞—Ö–æ–¥–æ–∫
            consecutiveNoPoppersFound = 0;
            if (isDebugged) {
                console.log('‚úÖ MUTATION [' + debugMutationCounter + ']: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤—ã—Ö div[data-popper-escaped]: ' + totalNewPoppers);
            }
            increaseCheckFrequency();
        } else if (mutations.length > 0) {
            // üî• –ù–ï –ù–ê–ô–î–ï–ù–´ —ç–ª–µ–º–µ–Ω—Ç—ã - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–µ–Ω–∞—Ö–æ–¥–æ–∫
            consecutiveNoPoppersFound++;
            if (isDebugged) {
                console.log('üîç MUTATION [' + debugMutationCounter + ']: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º—É—Ç–∞—Ü–∏–π: ' + mutations.length + ', div[data-popper-escaped] –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' +
                       ' (–Ω–µ–Ω–∞—Ö–æ–¥–æ–∫ –ø–æ–¥—Ä—è–¥: ' + consecutiveNoPoppersFound + ')');
            }

            // üî• –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–∞—É–∑–∞ –ø—Ä–∏ 10 –Ω–µ–Ω–∞—Ö–æ–¥–∫–∞—Ö –ø–æ–¥—Ä—è–¥
            if (consecutiveNoPoppersFound >= MAX_CONSECUTIVE_NO_POPPERS && !observerPaused) {
                observerPaused = true;
                if (isDebugged) {
                    console.log('‚è∏Ô∏è OBSERVER –ü–ê–£–ó–ê: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–µ–Ω–∞—Ö–æ–¥–æ–∫ (' + MAX_CONSECUTIVE_NO_POPPERS + '), –∂–¥—ë–º –Ω–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ side-nav-card');
                }
                observer.disconnect();
            }
        }
    });

    function startHiding() {
        if (isDebugged) {
            console.log('üé¨ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å–∫—Ä—ã—Ç–∏—è...');
        }
        checkInterval = 10000;
        restartInterval();
        setupSideNavHoverHandlers();

        observer.observe(document, { childList: true, subtree: true });

        setTimeout(findAndSchedulePoppers, 1000);
        setTimeout(findAndSchedulePoppers, 2500);

        window.popperHiderStatus = function() {
            console.log('üìä –°–¢–ê–¢–£–° POPPER HIDER:');
            console.log('   üìç –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤: ' + processedElements.size);
            console.log('   üìç –°–∫—Ä—ã—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ' + hiddenElements.size);
            console.log('   ‚ö° –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ' + checkInterval + 'ms');
            console.log('   üñ±Ô∏è  –ö—É—Ä—Å–æ—Ä –Ω–∞ side-nav: ' + isHoveringSideNav);
            console.log('   ‚è∏Ô∏è  –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–∏—è: ' + isPausedAfterHide);
            console.log('   üëÅÔ∏è  Observer –Ω–∞ –ø–∞—É–∑–µ: ' + observerPaused);
            console.log('   üìç –ü—Ä–æ–ø—É—Å–∫–æ–≤ –ø–æ–¥—Ä—è–¥: ' + consecutiveSkippedMutations);
            console.log('   üìç –ù–µ–Ω–∞—Ö–æ–¥–æ–∫ –ø–æ–¥—Ä—è–¥: ' + consecutiveNoPoppersFound);
            console.log('   üìç –í—Å–µ–≥–æ —Å–∫—Ä—ã—Ç–æ: ' + hiddenCount);
            console.log('   üîç –°—á—ë—Ç—á–∏–∫–∏ –æ—Ç–ª–∞–¥–∫–∏:');
            console.log('      - –ü—Ä–æ–≤–µ—Ä–∫–∏: ' + debugCheckCounter);
            console.log('      - –ú—É—Ç–∞—Ü–∏–∏: ' + debugMutationCounter);
            console.log('      - –¢–∞–π–º–µ—Ä—ã: ' + debugScheduleCounter);
            console.log('      - –ù–∞–π–¥–µ–Ω–æ div[data-popper-escaped]: ' + debugPopperFoundCounter);
        };

        window.resumePopperHider = function() {
            isPausedAfterHide = false;
            observerPaused = false;
            consecutiveSkippedMutations = 0;
            consecutiveNoPoppersFound = 0;
            increaseCheckFrequency();
            observer.observe(document, { childList: true, subtree: true });
            if (isDebugged) {
                console.log('‚ñ∂Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ observer');
            }
        };

        if (isDebugged) {
            console.log('üí° –ö–æ–º–∞–Ω–¥—ã –æ—Ç–ª–∞–¥–∫–∏: popperHiderStatus(), resumePopperHider()');
        }
    }

    document.addEventListener('visibilitychange', function() {
        if (document.hidden) {
            isActive = false;
            if (isDebugged) {
                console.log('‚è∏Ô∏è –°–ö–†–ò–ü–¢ –ü–†–ò–û–°–¢–ê–ù–û–í–õ–ï–ù: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞');
            }
        } else {
            isActive = true;
            if (isDebugged) {
                console.log('‚ñ∂Ô∏è –°–ö–†–ò–ü–¢ –í–û–ó–û–ë–ù–û–í–õ–ï–ù: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–∞');
            }
        }
    });

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', startHiding);
    } else {
        startHiding();
    }

    setInterval(() => {
        if (observerPaused || consecutiveSkippedMutations > 0 || consecutiveNoPoppersFound > 0) {
            if (isDebugged) {
                console.log('üìà –°–¢–ê–¢–£–° [–∞–≤—Ç–æ]: observerPaused=' + observerPaused +
                       ', skippedMutations=' + consecutiveSkippedMutations +
                       ', noPoppers=' + consecutiveNoPoppersFound);
            }
        }
    }, 30000);

})();